# Generate Parentheses :-

[Problem Link] :--- (https://leetcode.com/problems/generate-parentheses/description/)

<h3>
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.<br><br>

Example 1:<br>
Input: n = 3<br>
Output: ["((()))","(()())","(())()","()(())","()()()"]<br><br>

Example 2:<br>
Input: n = 1<br>
Output: ["()"]<br><br>
 
Constraints:<br>
1 <= n <= 8<br><br>
  
</h3>

***Solution***

```
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        dfs(0, 0, "", n, res);
        return res;        
    }

private:
    void dfs(int openP, int closeP, string s, int n, vector<string>& res) {
        if (openP == closeP && openP + closeP == n * 2) {
            res.push_back(s);
            return;
        }

        if (openP < n) {
            dfs(openP + 1, closeP, s + "(", n, res);
        }

        if (closeP < openP) {
            dfs(openP, closeP + 1, s + ")", n, res);
        }
    }
};

```
